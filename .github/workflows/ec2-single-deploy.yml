name: istory scaling ci/cd pipeline

permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: ["main"]
    paths:
      - 'xinfra/istory-ec2-eks/**'
      - '.github/workflows/ec2-scaling-deploy.yml'
      - 'scripts/**'
      - 'appspec.yml'

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: 1. 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: 2. 개발용 application.yml 생성
        run: |
          mkdir -p src/main/resources
          cat > src/main/resources/application.yml << EOF
          spring:
            datasource:
              url: ${{ secrets.DATABASE_URL }}
              username: ${{ secrets.MYSQL_USER }}
              password: ${{ secrets.MYSQL_PASSWORD }}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              database-platform: org.hibernate.dialect.MySQL8Dialect
              hibernate:
                ddl-auto: update
              show-sql: true
            application:
              name: USER-SERVICE
            jwt:
              issuer: user@gmail.com
              secret_key: study-springboot
          management:
            endpoints:
              web:
                exposure:
                  include: health,info
            endpoint:
              health:
                show-details: always
          EOF

      - name: 3. AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: 4. JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 5. Gradle Build 및 JAR 이름 고정
        run: |
          chmod +x gradlew
          ./gradlew bootJar
          mkdir -p deployment
          cp build/libs/*.jar deployment/app.jar  # 이름 고정

      - name: 6. 배포 패키지 구성
        run: |
          mkdir -p deployment/scripts
          cp scripts/*.sh deployment/scripts/
          cp appspec.yml deployment/
          chmod +x deployment/scripts/*.sh
          chmod +x deployment/app.jar
          cd deployment && zip -r ../deploy.zip .

      - name: 7. S3 업로드
        run: |
          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/deploy/deploy.zip

      - name: 8. 기존 배포 중단
        run: |
          DEPLOYMENTS=$(aws deploy list-deployments \
            --application-name istory-app \
            --deployment-group-name istory-prod-deploy-group \
            --include-only-statuses "InProgress" \
            --query 'deployments[]' \
            --output text)

          if [ ! -z "$DEPLOYMENTS" ]; then
            for deployment in $DEPLOYMENTS; do
              echo "Stopping deployment $deployment"
              aws deploy stop-deployment --deployment-id $deployment
            done
            sleep 10
          fi

      - name: 9. 배포 생성
        id: deploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name istory-app \
            --deployment-group-name istory-prod-deploy-group \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=deploy/deploy.zip,bundleType=zip \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --output text \
            --query 'deploymentId')
          echo "deployment_id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT

      - name: 10. 배포 성공 대기
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.deployment_id }}